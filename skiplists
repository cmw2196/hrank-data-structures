#!/bin/python

from random import randint
#from collections import deque
#from itertools import islice

class skipnode:
    
    def __init__(self, height = 0, elem = None):
        self.elem = elem
        self.next = [None]*height
        
class skiplist:
    
    def __init__(self):
        self.head = skipnode()
        self.len = 0
        self.maxHeight = 0
        self.comparisons = 0
        self.median = None
        
    def __len__(self):
        return(self.len)
    
    def __iter__(self):
        node = self.head.next[0]
        while node is not None:
            yield node.elem
            node = node.next[0] 
            
    def med(self):
        array = list(self)
        if array == []:
            print("Wrong!")
            return
        half = len(array) // 2
        if not len(array) % 2:
            self.median = (array[half - 1] + array[half]) / 2.0
        else:
            self.median = array[half]
        print(self.median)
        
            
    
    #def updatemed(self,x):
        
               
        
    def randomHeight(self):
        height = 1
        while randint(1, 2) != 1:
            self.comparisons += 1
            height += 1
        return height    
        
    def updateList(self, elem):
        update = [None]*self.maxHeight
        x = self.head 
        for i in reversed(range((self.maxHeight))):
            while x.next[i] is not None and x.next[i].elem < elem:
                x = x.next[i]
                self.comparisons += 1
            update[i] = x
        return(update)
    
    def find(self, elem, update = None):
        if update is None:
            update = self.updateList(elem)  
        if len(update) > 0:
            candidate = update[0].next[0]
            if candidate is not None and elem == candidate.elem:
                return(candidate)
        return(None)
    
    def insert(self, elem):
        node = skipnode(self.randomHeight(), elem)
        self.maxHeight = max(self.maxHeight, len(node.next))
        
        while len(self.head.next) < len(node.next):
            self.comparisons += 1
            self.head.next.append(None)   
        update = self.updateList(elem)
        for i in range(len(node.next)):
            node.next[i] = update[i].next[i]
            update[i].next[i] = node
        self.len +=1

    def remove(self, elem):
        update = self.updateList(elem)
        x = self.find(elem, update)
        if x is not None:
            for i in reversed(range(len(x.next))):
                update[i].next[i] = x.next[i]
                if self.head.next[i] is None:
                    self.maxHeight -= 1
            self.len -= 1
                  
            
                          

def median(s,x):
    slist = skiplist()
    
    def iteration(s,x,skipList, a):
        if s[a] == 'r':
            if skipList.find(x[a]):
                skipList.remove(x[a])
            else:
                print('Wrong!')
                return
        else:
            skipList.insert(x[a])
        skipList.med()

    for a in range(len(s)):
        iteration(s,x,slist, a)
        


N = int(input())
s = []
x = []
for i in range(0, N):
   tmp = input().strip().split(' ')
   a, b = [xx for xx in tmp]
   s.append(a)
   x.append(int(b))
    
median(s,x)
